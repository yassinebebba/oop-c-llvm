# Generated from core/C.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,256,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,5,5,81,8,
        5,10,5,12,5,84,9,5,3,5,86,8,5,1,6,4,6,89,8,6,11,6,12,6,90,1,6,1,
        6,5,6,95,8,6,10,6,12,6,98,9,6,1,6,3,6,101,8,6,1,6,1,6,4,6,105,8,
        6,11,6,12,6,106,1,6,3,6,110,8,6,1,6,4,6,113,8,6,11,6,12,6,114,1,
        6,3,6,118,8,6,1,7,1,7,3,7,122,8,7,1,7,4,7,125,8,7,11,7,12,7,126,
        1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,
        12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,
        14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        28,1,28,5,28,211,8,28,10,28,12,28,214,9,28,1,29,4,29,217,8,29,11,
        29,12,29,218,1,29,1,29,1,30,1,30,3,30,225,8,30,1,30,3,30,228,8,30,
        1,30,1,30,1,31,1,31,1,31,1,31,5,31,236,8,31,10,31,12,31,239,9,31,
        1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,5,32,250,8,32,10,32,
        12,32,253,9,32,1,32,1,32,1,237,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,1,0,8,1,0,49,57,1,0,48,57,2,0,69,69,101,
        101,2,0,43,43,45,45,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,273,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,69,1,0,0,0,5,71,1,0,0,0,7,73,1,
        0,0,0,9,75,1,0,0,0,11,85,1,0,0,0,13,117,1,0,0,0,15,119,1,0,0,0,17,
        128,1,0,0,0,19,134,1,0,0,0,21,141,1,0,0,0,23,150,1,0,0,0,25,155,
        1,0,0,0,27,160,1,0,0,0,29,166,1,0,0,0,31,170,1,0,0,0,33,175,1,0,
        0,0,35,181,1,0,0,0,37,188,1,0,0,0,39,190,1,0,0,0,41,192,1,0,0,0,
        43,194,1,0,0,0,45,196,1,0,0,0,47,198,1,0,0,0,49,200,1,0,0,0,51,202,
        1,0,0,0,53,204,1,0,0,0,55,206,1,0,0,0,57,208,1,0,0,0,59,216,1,0,
        0,0,61,227,1,0,0,0,63,231,1,0,0,0,65,245,1,0,0,0,67,68,5,61,0,0,
        68,2,1,0,0,0,69,70,5,47,0,0,70,4,1,0,0,0,71,72,5,43,0,0,72,6,1,0,
        0,0,73,74,5,45,0,0,74,8,1,0,0,0,75,76,5,34,0,0,76,10,1,0,0,0,77,
        86,5,48,0,0,78,82,7,0,0,0,79,81,7,1,0,0,80,79,1,0,0,0,81,84,1,0,
        0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,85,77,
        1,0,0,0,85,78,1,0,0,0,86,12,1,0,0,0,87,89,7,1,0,0,88,87,1,0,0,0,
        89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,92,1,0,0,0,92,96,3,
        39,19,0,93,95,7,1,0,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,
        96,97,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,99,101,3,15,7,0,100,99,
        1,0,0,0,100,101,1,0,0,0,101,118,1,0,0,0,102,104,3,39,19,0,103,105,
        7,1,0,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,
        1,0,0,0,107,109,1,0,0,0,108,110,3,15,7,0,109,108,1,0,0,0,109,110,
        1,0,0,0,110,118,1,0,0,0,111,113,7,1,0,0,112,111,1,0,0,0,113,114,
        1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,116,1,0,0,0,116,118,
        3,15,7,0,117,88,1,0,0,0,117,102,1,0,0,0,117,112,1,0,0,0,118,14,1,
        0,0,0,119,121,7,2,0,0,120,122,7,3,0,0,121,120,1,0,0,0,121,122,1,
        0,0,0,122,124,1,0,0,0,123,125,7,1,0,0,124,123,1,0,0,0,125,126,1,
        0,0,0,126,124,1,0,0,0,126,127,1,0,0,0,127,16,1,0,0,0,128,129,5,99,
        0,0,129,130,5,111,0,0,130,131,5,110,0,0,131,132,5,115,0,0,132,133,
        5,116,0,0,133,18,1,0,0,0,134,135,5,115,0,0,135,136,5,105,0,0,136,
        137,5,103,0,0,137,138,5,110,0,0,138,139,5,101,0,0,139,140,5,100,
        0,0,140,20,1,0,0,0,141,142,5,117,0,0,142,143,5,110,0,0,143,144,5,
        115,0,0,144,145,5,105,0,0,145,146,5,103,0,0,146,147,5,110,0,0,147,
        148,5,101,0,0,148,149,5,100,0,0,149,22,1,0,0,0,150,151,5,118,0,0,
        151,152,5,111,0,0,152,153,5,105,0,0,153,154,5,100,0,0,154,24,1,0,
        0,0,155,156,5,99,0,0,156,157,5,104,0,0,157,158,5,97,0,0,158,159,
        5,114,0,0,159,26,1,0,0,0,160,161,5,115,0,0,161,162,5,104,0,0,162,
        163,5,111,0,0,163,164,5,114,0,0,164,165,5,116,0,0,165,28,1,0,0,0,
        166,167,5,105,0,0,167,168,5,110,0,0,168,169,5,116,0,0,169,30,1,0,
        0,0,170,171,5,108,0,0,171,172,5,111,0,0,172,173,5,110,0,0,173,174,
        5,103,0,0,174,32,1,0,0,0,175,176,5,102,0,0,176,177,5,108,0,0,177,
        178,5,111,0,0,178,179,5,97,0,0,179,180,5,116,0,0,180,34,1,0,0,0,
        181,182,5,100,0,0,182,183,5,111,0,0,183,184,5,117,0,0,184,185,5,
        98,0,0,185,186,5,108,0,0,186,187,5,101,0,0,187,36,1,0,0,0,188,189,
        5,42,0,0,189,38,1,0,0,0,190,191,5,46,0,0,191,40,1,0,0,0,192,193,
        5,40,0,0,193,42,1,0,0,0,194,195,5,41,0,0,195,44,1,0,0,0,196,197,
        5,123,0,0,197,46,1,0,0,0,198,199,5,125,0,0,199,48,1,0,0,0,200,201,
        5,91,0,0,201,50,1,0,0,0,202,203,5,93,0,0,203,52,1,0,0,0,204,205,
        5,59,0,0,205,54,1,0,0,0,206,207,5,44,0,0,207,56,1,0,0,0,208,212,
        7,4,0,0,209,211,7,5,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,
        1,0,0,0,212,213,1,0,0,0,213,58,1,0,0,0,214,212,1,0,0,0,215,217,7,
        6,0,0,216,215,1,0,0,0,217,218,1,0,0,0,218,216,1,0,0,0,218,219,1,
        0,0,0,219,220,1,0,0,0,220,221,6,29,0,0,221,60,1,0,0,0,222,224,5,
        13,0,0,223,225,5,10,0,0,224,223,1,0,0,0,224,225,1,0,0,0,225,228,
        1,0,0,0,226,228,5,10,0,0,227,222,1,0,0,0,227,226,1,0,0,0,228,229,
        1,0,0,0,229,230,6,30,0,0,230,62,1,0,0,0,231,232,5,47,0,0,232,233,
        5,42,0,0,233,237,1,0,0,0,234,236,9,0,0,0,235,234,1,0,0,0,236,239,
        1,0,0,0,237,238,1,0,0,0,237,235,1,0,0,0,238,240,1,0,0,0,239,237,
        1,0,0,0,240,241,5,42,0,0,241,242,5,47,0,0,242,243,1,0,0,0,243,244,
        6,31,0,0,244,64,1,0,0,0,245,246,5,47,0,0,246,247,5,47,0,0,247,251,
        1,0,0,0,248,250,8,7,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,
        1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,
        6,32,0,0,255,66,1,0,0,0,18,0,82,85,90,96,100,106,109,114,117,121,
        126,212,218,224,227,237,251,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    INTEGER_CONSTANT = 6
    FLOAT_CONSTANT = 7
    EXPONENT = 8
    CONST = 9
    SIGNED = 10
    UNSIGNED = 11
    VOID = 12
    CHAR = 13
    SHORT = 14
    INT = 15
    LONG = 16
    FLOAT = 17
    DOUBLE = 18
    STAR = 19
    DOT = 20
    LP = 21
    RP = 22
    LC = 23
    RC = 24
    LSQRB = 25
    RSQRB = 26
    SEMICOLON = 27
    COMMA = 28
    IDENTIFIER = 29
    WS = 30
    NEWLINE = 31
    BLOCK_COMMENT = 32
    LINE_COMMENT = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'/'", "'+'", "'-'", "'\"'", "'const'", "'signed'", "'unsigned'", 
            "'void'", "'char'", "'short'", "'int'", "'long'", "'float'", 
            "'double'", "'*'", "'.'", "'('", "')'", "'{'", "'}'", "'['", 
            "']'", "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "INTEGER_CONSTANT", "FLOAT_CONSTANT", "EXPONENT", "CONST", "SIGNED", 
            "UNSIGNED", "VOID", "CHAR", "SHORT", "INT", "LONG", "FLOAT", 
            "DOUBLE", "STAR", "DOT", "LP", "RP", "LC", "RC", "LSQRB", "RSQRB", 
            "SEMICOLON", "COMMA", "IDENTIFIER", "WS", "NEWLINE", "BLOCK_COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "INTEGER_CONSTANT", 
                  "FLOAT_CONSTANT", "EXPONENT", "CONST", "SIGNED", "UNSIGNED", 
                  "VOID", "CHAR", "SHORT", "INT", "LONG", "FLOAT", "DOUBLE", 
                  "STAR", "DOT", "LP", "RP", "LC", "RC", "LSQRB", "RSQRB", 
                  "SEMICOLON", "COMMA", "IDENTIFIER", "WS", "NEWLINE", "BLOCK_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


