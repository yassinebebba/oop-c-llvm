# Generated from core/C.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,274,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,5,4,80,8,4,
        10,4,12,4,83,9,4,1,4,1,4,1,5,1,5,5,5,89,8,5,10,5,12,5,92,9,5,1,5,
        1,5,1,6,1,6,1,6,5,6,99,8,6,10,6,12,6,102,9,6,3,6,104,8,6,1,7,4,7,
        107,8,7,11,7,12,7,108,1,7,1,7,5,7,113,8,7,10,7,12,7,116,9,7,1,7,
        3,7,119,8,7,1,7,1,7,4,7,123,8,7,11,7,12,7,124,1,7,3,7,128,8,7,1,
        7,4,7,131,8,7,11,7,12,7,132,1,7,3,7,136,8,7,1,8,1,8,3,8,140,8,8,
        1,8,4,8,143,8,8,11,8,12,8,144,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,
        1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
        1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,
        1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,5,29,229,8,29,10,29,
        12,29,232,9,29,1,30,4,30,235,8,30,11,30,12,30,236,1,30,1,30,1,31,
        1,31,3,31,243,8,31,1,31,3,31,246,8,31,1,31,1,31,1,32,1,32,1,32,1,
        32,5,32,254,8,32,10,32,12,32,257,9,32,1,32,1,32,1,32,1,32,1,32,1,
        33,1,33,1,33,1,33,5,33,268,8,33,10,33,12,33,271,9,33,1,33,1,33,1,
        255,0,34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,1,0,10,1,0,34,34,1,0,39,39,1,0,49,57,1,0,48,57,2,0,69,69,101,
        101,2,0,43,43,45,45,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,3,0,9,10,13,13,32,32,2,0,10,10,13,13,293,0,1,1,0,0,0,0,3,
        1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
        0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
        0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,
        0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,
        0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,
        0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,71,1,0,0,0,5,73,1,
        0,0,0,7,75,1,0,0,0,9,77,1,0,0,0,11,86,1,0,0,0,13,103,1,0,0,0,15,
        135,1,0,0,0,17,137,1,0,0,0,19,146,1,0,0,0,21,152,1,0,0,0,23,159,
        1,0,0,0,25,168,1,0,0,0,27,173,1,0,0,0,29,178,1,0,0,0,31,184,1,0,
        0,0,33,188,1,0,0,0,35,193,1,0,0,0,37,199,1,0,0,0,39,206,1,0,0,0,
        41,208,1,0,0,0,43,210,1,0,0,0,45,212,1,0,0,0,47,214,1,0,0,0,49,216,
        1,0,0,0,51,218,1,0,0,0,53,220,1,0,0,0,55,222,1,0,0,0,57,224,1,0,
        0,0,59,226,1,0,0,0,61,234,1,0,0,0,63,245,1,0,0,0,65,249,1,0,0,0,
        67,263,1,0,0,0,69,70,5,61,0,0,70,2,1,0,0,0,71,72,5,47,0,0,72,4,1,
        0,0,0,73,74,5,43,0,0,74,6,1,0,0,0,75,76,5,45,0,0,76,8,1,0,0,0,77,
        81,5,34,0,0,78,80,8,0,0,0,79,78,1,0,0,0,80,83,1,0,0,0,81,79,1,0,
        0,0,81,82,1,0,0,0,82,84,1,0,0,0,83,81,1,0,0,0,84,85,5,34,0,0,85,
        10,1,0,0,0,86,90,5,39,0,0,87,89,8,1,0,0,88,87,1,0,0,0,89,92,1,0,
        0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,93,94,
        5,39,0,0,94,12,1,0,0,0,95,104,5,48,0,0,96,100,7,2,0,0,97,99,7,3,
        0,0,98,97,1,0,0,0,99,102,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,
        101,104,1,0,0,0,102,100,1,0,0,0,103,95,1,0,0,0,103,96,1,0,0,0,104,
        14,1,0,0,0,105,107,7,3,0,0,106,105,1,0,0,0,107,108,1,0,0,0,108,106,
        1,0,0,0,108,109,1,0,0,0,109,110,1,0,0,0,110,114,3,41,20,0,111,113,
        7,3,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,
        1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,117,119,3,17,8,0,118,117,
        1,0,0,0,118,119,1,0,0,0,119,136,1,0,0,0,120,122,3,41,20,0,121,123,
        7,3,0,0,122,121,1,0,0,0,123,124,1,0,0,0,124,122,1,0,0,0,124,125,
        1,0,0,0,125,127,1,0,0,0,126,128,3,17,8,0,127,126,1,0,0,0,127,128,
        1,0,0,0,128,136,1,0,0,0,129,131,7,3,0,0,130,129,1,0,0,0,131,132,
        1,0,0,0,132,130,1,0,0,0,132,133,1,0,0,0,133,134,1,0,0,0,134,136,
        3,17,8,0,135,106,1,0,0,0,135,120,1,0,0,0,135,130,1,0,0,0,136,16,
        1,0,0,0,137,139,7,4,0,0,138,140,7,5,0,0,139,138,1,0,0,0,139,140,
        1,0,0,0,140,142,1,0,0,0,141,143,7,3,0,0,142,141,1,0,0,0,143,144,
        1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,18,1,0,0,0,146,147,5,
        99,0,0,147,148,5,111,0,0,148,149,5,110,0,0,149,150,5,115,0,0,150,
        151,5,116,0,0,151,20,1,0,0,0,152,153,5,115,0,0,153,154,5,105,0,0,
        154,155,5,103,0,0,155,156,5,110,0,0,156,157,5,101,0,0,157,158,5,
        100,0,0,158,22,1,0,0,0,159,160,5,117,0,0,160,161,5,110,0,0,161,162,
        5,115,0,0,162,163,5,105,0,0,163,164,5,103,0,0,164,165,5,110,0,0,
        165,166,5,101,0,0,166,167,5,100,0,0,167,24,1,0,0,0,168,169,5,118,
        0,0,169,170,5,111,0,0,170,171,5,105,0,0,171,172,5,100,0,0,172,26,
        1,0,0,0,173,174,5,99,0,0,174,175,5,104,0,0,175,176,5,97,0,0,176,
        177,5,114,0,0,177,28,1,0,0,0,178,179,5,115,0,0,179,180,5,104,0,0,
        180,181,5,111,0,0,181,182,5,114,0,0,182,183,5,116,0,0,183,30,1,0,
        0,0,184,185,5,105,0,0,185,186,5,110,0,0,186,187,5,116,0,0,187,32,
        1,0,0,0,188,189,5,108,0,0,189,190,5,111,0,0,190,191,5,110,0,0,191,
        192,5,103,0,0,192,34,1,0,0,0,193,194,5,102,0,0,194,195,5,108,0,0,
        195,196,5,111,0,0,196,197,5,97,0,0,197,198,5,116,0,0,198,36,1,0,
        0,0,199,200,5,100,0,0,200,201,5,111,0,0,201,202,5,117,0,0,202,203,
        5,98,0,0,203,204,5,108,0,0,204,205,5,101,0,0,205,38,1,0,0,0,206,
        207,5,42,0,0,207,40,1,0,0,0,208,209,5,46,0,0,209,42,1,0,0,0,210,
        211,5,40,0,0,211,44,1,0,0,0,212,213,5,41,0,0,213,46,1,0,0,0,214,
        215,5,123,0,0,215,48,1,0,0,0,216,217,5,125,0,0,217,50,1,0,0,0,218,
        219,5,91,0,0,219,52,1,0,0,0,220,221,5,93,0,0,221,54,1,0,0,0,222,
        223,5,59,0,0,223,56,1,0,0,0,224,225,5,44,0,0,225,58,1,0,0,0,226,
        230,7,6,0,0,227,229,7,7,0,0,228,227,1,0,0,0,229,232,1,0,0,0,230,
        228,1,0,0,0,230,231,1,0,0,0,231,60,1,0,0,0,232,230,1,0,0,0,233,235,
        7,8,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,1,0,0,0,236,237,
        1,0,0,0,237,238,1,0,0,0,238,239,6,30,0,0,239,62,1,0,0,0,240,242,
        5,13,0,0,241,243,5,10,0,0,242,241,1,0,0,0,242,243,1,0,0,0,243,246,
        1,0,0,0,244,246,5,10,0,0,245,240,1,0,0,0,245,244,1,0,0,0,246,247,
        1,0,0,0,247,248,6,31,0,0,248,64,1,0,0,0,249,250,5,47,0,0,250,251,
        5,42,0,0,251,255,1,0,0,0,252,254,9,0,0,0,253,252,1,0,0,0,254,257,
        1,0,0,0,255,256,1,0,0,0,255,253,1,0,0,0,256,258,1,0,0,0,257,255,
        1,0,0,0,258,259,5,42,0,0,259,260,5,47,0,0,260,261,1,0,0,0,261,262,
        6,32,0,0,262,66,1,0,0,0,263,264,5,47,0,0,264,265,5,47,0,0,265,269,
        1,0,0,0,266,268,8,9,0,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,
        1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,0,0,0,272,273,
        6,33,0,0,273,68,1,0,0,0,20,0,81,90,100,103,108,114,118,124,127,132,
        135,139,144,230,236,242,245,255,269,1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    STRING_LITERAL = 5
    CHAR_CONSTANT = 6
    INTEGER_CONSTANT = 7
    FLOAT_CONSTANT = 8
    EXPONENT = 9
    CONST = 10
    SIGNED = 11
    UNSIGNED = 12
    VOID = 13
    CHAR = 14
    SHORT = 15
    INT = 16
    LONG = 17
    FLOAT = 18
    DOUBLE = 19
    STAR = 20
    DOT = 21
    LP = 22
    RP = 23
    LC = 24
    RC = 25
    LSQRB = 26
    RSQRB = 27
    SEMICOLON = 28
    COMMA = 29
    IDENTIFIER = 30
    WS = 31
    NEWLINE = 32
    BLOCK_COMMENT = 33
    LINE_COMMENT = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'/'", "'+'", "'-'", "'const'", "'signed'", "'unsigned'", 
            "'void'", "'char'", "'short'", "'int'", "'long'", "'float'", 
            "'double'", "'*'", "'.'", "'('", "')'", "'{'", "'}'", "'['", 
            "']'", "';'", "','" ]

    symbolicNames = [ "<INVALID>",
            "STRING_LITERAL", "CHAR_CONSTANT", "INTEGER_CONSTANT", "FLOAT_CONSTANT", 
            "EXPONENT", "CONST", "SIGNED", "UNSIGNED", "VOID", "CHAR", "SHORT", 
            "INT", "LONG", "FLOAT", "DOUBLE", "STAR", "DOT", "LP", "RP", 
            "LC", "RC", "LSQRB", "RSQRB", "SEMICOLON", "COMMA", "IDENTIFIER", 
            "WS", "NEWLINE", "BLOCK_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "STRING_LITERAL", "CHAR_CONSTANT", 
                  "INTEGER_CONSTANT", "FLOAT_CONSTANT", "EXPONENT", "CONST", 
                  "SIGNED", "UNSIGNED", "VOID", "CHAR", "SHORT", "INT", 
                  "LONG", "FLOAT", "DOUBLE", "STAR", "DOT", "LP", "RP", 
                  "LC", "RC", "LSQRB", "RSQRB", "SEMICOLON", "COMMA", "IDENTIFIER", 
                  "WS", "NEWLINE", "BLOCK_COMMENT", "LINE_COMMENT" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


