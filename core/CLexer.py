# Generated from core/C.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,123,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,5,1,44,8,1,10,1,12,1,47,9,1,1,2,1,2,5,2,51,8,2,10,2,12,2,54,
        9,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,
        1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,4,13,
        84,8,13,11,13,12,13,85,1,13,1,13,1,14,1,14,3,14,92,8,14,1,14,3,14,
        95,8,14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,103,8,15,10,15,12,15,
        106,9,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,5,16,117,8,
        16,10,16,12,16,120,9,16,1,16,1,16,1,104,0,17,1,1,3,2,5,3,7,4,9,5,
        11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
        17,1,0,5,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,
        34,34,2,0,9,9,32,32,2,0,10,10,13,13,129,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,1,
        35,1,0,0,0,3,41,1,0,0,0,5,48,1,0,0,0,7,57,1,0,0,0,9,62,1,0,0,0,11,
        66,1,0,0,0,13,68,1,0,0,0,15,70,1,0,0,0,17,72,1,0,0,0,19,74,1,0,0,
        0,21,76,1,0,0,0,23,78,1,0,0,0,25,80,1,0,0,0,27,83,1,0,0,0,29,94,
        1,0,0,0,31,98,1,0,0,0,33,112,1,0,0,0,35,36,5,118,0,0,36,37,5,111,
        0,0,37,38,5,105,0,0,38,39,5,100,0,0,39,40,5,32,0,0,40,2,1,0,0,0,
        41,45,7,0,0,0,42,44,7,1,0,0,43,42,1,0,0,0,44,47,1,0,0,0,45,43,1,
        0,0,0,45,46,1,0,0,0,46,4,1,0,0,0,47,45,1,0,0,0,48,52,5,34,0,0,49,
        51,8,2,0,0,50,49,1,0,0,0,51,54,1,0,0,0,52,50,1,0,0,0,52,53,1,0,0,
        0,53,55,1,0,0,0,54,52,1,0,0,0,55,56,5,34,0,0,56,6,1,0,0,0,57,58,
        5,118,0,0,58,59,5,111,0,0,59,60,5,105,0,0,60,61,5,100,0,0,61,8,1,
        0,0,0,62,63,5,105,0,0,63,64,5,110,0,0,64,65,5,116,0,0,65,10,1,0,
        0,0,66,67,5,42,0,0,67,12,1,0,0,0,68,69,5,40,0,0,69,14,1,0,0,0,70,
        71,5,41,0,0,71,16,1,0,0,0,72,73,5,123,0,0,73,18,1,0,0,0,74,75,5,
        125,0,0,75,20,1,0,0,0,76,77,5,91,0,0,77,22,1,0,0,0,78,79,5,93,0,
        0,79,24,1,0,0,0,80,81,5,59,0,0,81,26,1,0,0,0,82,84,7,3,0,0,83,82,
        1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,87,1,0,0,0,
        87,88,6,13,0,0,88,28,1,0,0,0,89,91,5,13,0,0,90,92,5,10,0,0,91,90,
        1,0,0,0,91,92,1,0,0,0,92,95,1,0,0,0,93,95,5,10,0,0,94,89,1,0,0,0,
        94,93,1,0,0,0,95,96,1,0,0,0,96,97,6,14,0,0,97,30,1,0,0,0,98,99,5,
        47,0,0,99,100,5,42,0,0,100,104,1,0,0,0,101,103,9,0,0,0,102,101,1,
        0,0,0,103,106,1,0,0,0,104,105,1,0,0,0,104,102,1,0,0,0,105,107,1,
        0,0,0,106,104,1,0,0,0,107,108,5,42,0,0,108,109,5,47,0,0,109,110,
        1,0,0,0,110,111,6,15,0,0,111,32,1,0,0,0,112,113,5,47,0,0,113,114,
        5,47,0,0,114,118,1,0,0,0,115,117,8,4,0,0,116,115,1,0,0,0,117,120,
        1,0,0,0,118,116,1,0,0,0,118,119,1,0,0,0,119,121,1,0,0,0,120,118,
        1,0,0,0,121,122,6,16,0,0,122,34,1,0,0,0,8,0,45,52,85,91,94,104,118,
        1,6,0,0
    ]

class CLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    IDENTIFIER = 2
    STRING_LITERAL = 3
    VOID = 4
    INT = 5
    STAR = 6
    LP = 7
    RP = 8
    LC = 9
    RC = 10
    LSQRB = 11
    RSQRB = 12
    SEMICOLON = 13
    WS = 14
    NEWLINE = 15
    BLOCK_COMMENT = 16
    LINE_COMMENT = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'void '", "'void'", "'int'", "'*'", "'('", "')'", "'{'", "'}'", 
            "'['", "']'", "';'" ]

    symbolicNames = [ "<INVALID>",
            "IDENTIFIER", "STRING_LITERAL", "VOID", "INT", "STAR", "LP", 
            "RP", "LC", "RC", "LSQRB", "RSQRB", "SEMICOLON", "WS", "NEWLINE", 
            "BLOCK_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "T__0", "IDENTIFIER", "STRING_LITERAL", "VOID", "INT", 
                  "STAR", "LP", "RP", "LC", "RC", "LSQRB", "RSQRB", "SEMICOLON", 
                  "WS", "NEWLINE", "BLOCK_COMMENT", "LINE_COMMENT" ]

    grammarFileName = "C.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


